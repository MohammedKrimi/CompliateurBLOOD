//true

/* les parametres precedes de var d√©finissent implicitement des attributs */

class Point(var x: Integer, var y: Integer, var name: String) is 
{
	var static next : Integer := 0; /* compteur d'instances */
	
	def static howMany() : Integer := this.next -1; /* nbre d'instances crees*/ 
	
	var hasClone : Integer := 0;

/* la valeur du champ ci-dessous est indefinie si hasClone vaut 0. 
* Le probleme est qu'on n'a pas l'equivalent de NULL (du bon type) dans le lang
*/

	var clone : Point;

	def Point(var x: Integer, var y:Integer, var name: String) is 
		{ this.next := this.next + 1; }

	def setName(s: String) is { this.name := s; } 
	
	def getx() : Integer := this.x;  /* pas de this implicite */

	def gety() : Integer := this.y;
	
	def isCloned() : Integer := this.hasClone <> 0;

	def move(dx: Integer, dy: Integer, verbose: Integer) : Point is 
		{
		this.x := this.x + dx;
		this.y := this.y + dy;

		if verbose then { this.print(verbose); }
			else {}

		/* pseudo variable resulst dans laquelle, par convention,
		* on laisse la valeur de retour d'une fonction qui a
		* un type de retour
		*/

		result:= this;
	}

	def print(verbose: Integer) is {
		if verbose then "Inside Point::print".println(); else {}
		
		this.name.print();

		( "= (" & this.x.toString() & ", " & this.y.toString() & ")").println();
	}


	def clone(): Point is
	{
		this.clone := new Point(this.x, this.y, this.name & "'");
		this.hasClone := 1;
		result := this.clone;
	}



	def allClones() is {
		this.print(0);
		if this.isCloned() then {this.clone.allClones();} else {}
	}


	def egal(p:Point) : Integer is {
		b1 : Integer := p.getx() - this.x;
		b2 : Integer := p.gety() - this.y;
		if b1 then result := 0; else result := b2 = 0;

	}

}