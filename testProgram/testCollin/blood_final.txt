//true

/* les parametres precedes de var définissent implicitement des attributs */

class Point(var x: Integer, var y: Integer, var name: String) is 
{
	var static next : Integer := 0; /* compteur d'instances */
	
	def static howMany() : Integer := this.next -1; /* nbre d'instances crees*/ 
	
	var hasClone : Integer := 0;

/* la valeur du champ ci-dessous est indefinie si hasClone vaut 0. 
* Le probleme est qu'on n'a pas l'equivalent de NULL (du bon type) dans le lang
*/

	var clone : Point;

	def Point(var x: Integer, var y:Integer, var name: String) is 
		{ this.next := this.next + 1; }

	def setName(s: String) is { this.name := s; } 
	
	def getx() : Integer := this.x;  /* pas de this implicite */

	def gety() : Integer := this.y;
	
	def isCloned() : Integer := this.hasClone <> 0;

	def move(dx: Integer, dy: Integer, verbose: Integer) : Point is 
		{
		this.x := this.x + dx;
		this.y := this.y + dy;

		if verbose then { this.print(verbose); }
			else {}

		/* pseudo variable resulst dans laquelle, par convention,
		* on laisse la valeur de retour d'une fonction qui a
		* un type de retour
		*/

		result:= this;
	}

	def print(verbose: Integer) is {
		if verbose then "Inside Point::print".println(); else {}
		
		this.name.print();

		( "= (" & this.x.toString() & ", " & this.y.toString() & ")").println();
	}


	def clone(): Point is
	{
		this.clone := new Point(this.x, this.y, this.name & "'");
		this.hasClone := 1;
		result := this.clone;
	}



	def allClones() is {
		this.print(0);
		if this.isCloned() then {this.clone.allClones();} else {}
	}


	def egal(p:Point) : Integer is {
		b1 : Integer := p.getx() - this.x;
		b2 : Integer := p.gety() - this.y;
		if b1 then result := 0; else result := b2 = 0;

	}

}



class Couleur(var coul: Integer) is {
	
	def Couleur (var coul : Integer) is {
		if coul < 0 then coul := 0;
		else if coul > 2 then coul := 0; else{}
		this.coul := coul;
	}


	def name(verbose: Integer) : String is {
		aux : String := "Blanc";
		if verbose then "Inside Couleur ::couleur".println(); else {}
		if this.coul = 0 then { result := aux;}
		else { 
			/* exemple avec deux blocs emvoites qui decl une var
		        * Ici le aux externe doit etre masque.
			*/
			aux : String := "Gris"; 
			if this.coul = 1 then aux := "Noir"; else {}
			result := aux;
			}
		}

	def estGris() : Integer is {
		"Inside Couleur::estGris".println();
		result := this.coul = 2;
	}

}
		

class CouleurFactory() is 
{
	var static theBlanc: Couleur := new Couleur(0);
	var static theNoir : Couleur := new Couleur(1);
	var static theGris: Couleur := new Couleur(2);
		

	def CouleurFactory() is {}

		def static blanc() : Couleur := this.theBlanc;
		def static noir() : Couleur := this.theNoir;
		def static gris() : Couleur := this.theGris;
}


class PointColore(x: Integer, y:Integer, var coul: Couleur) extends Point is {
	
	def PointColore(x: Integer, y:Integer, var coul: Couleur) :
	Point(x,y, "p-" & CptPoint.howMany().toString() ) is {}

	def couleur() : Couleur := this.coul;
	
	def colore() : Integer := this.coul.estGris() <> 0;

	def override clone() : Point is {
		
		result := new PointColore(this.x, this.y, this.coul);
		result.setName(this.name & "'");
		this.hasClone := 1;
		this.clone := result;
	}

		
	def estGris() : Integer := this.coul.estGris();
		

		def override print(verbose : Integer) is 
		{
			if verbose then "Inside PointColore::print".println();
			else {}
				super.print(verbose);
				this.couleur().name(verbose).println();
		}
}


class PointNoir(xc: Integer, yc:Integer) extends PointColore is 
{
	def PointNoir(xc: Integer, yc: Integer) : 
		PointColore(xc, yc, CouleurFactory.noir() ) is {}

	/* exemples de methodes redefinis */
	
	def override estGris() : Integer := 0;
	def override colore() : Integer := 1;
	def override couleur() : Couleur := CouleurFactory.noir();
}


class DefaultPoint() extends PointColore is {
		
	def DefaultPoint() : PointColore(0,0,CouleurFactory.blanc() ) is {}
		
	def override estGris() : Integer := 0;
	def override couleur() : Couleur := CouleurFactory.blanc();

}

class Test() is { 
	def Test() is {}
	def static test(p: Point, p2: PointColore, p3: PointNoire) is {
	
		c: String; c2: String; c3: String;
		
		true: Integer := 1;
		false: Integer := 0;
		
		p.print(true);	
		p2.print(true);
		if p2.colore() <> 0 then c := "colore"; else c:= "gris";
		if p3.colore() <> 0 then c2 := "colore"; else c2 :="gris";
		if p2.colore() <> 0 then c3 := "colore"; else c3 := "gris";
		
		"Resultats de test:".println();
			
		c.print(); " ".print();
		c2.print(); " ".print();
		c3.print();
		"".println(); /* ligne vide*/
	}

	def static test2(p: PointColore) is {
		p.couleur().name(0).print();
	}
 
}

class A() is {
	
	var v : Integer;

	def A() is { this.v := 1; }
	def f() is { "A::f()\n".print(); }
	def h(x: Integer, y: Integer) : Integer := x + y;
}

class A2() extends A is {
	
	var v : String; /* masque le champ v de la classe A*/

	def A2() : A() is {this.v := "hello";}
	
	def override f() is { "A2::f()\n".print();}
	
	def g() is {
		
		this.v := "world";
		/* par défault il s'agit du champ de A2*/
		
		(as A : this).v := 1; /* c'est un caste en A, v a le champ de A*/
		
		this.f();
		
		(as A : this).f();
	}
	

	def override h(x : Integer, y : Integer) : Integer := super.h(x,y);
}


	
{		/* on rentre dans le bloc d'instruction */

	

	true : Integer := 1;
	
	p1: Point := new Point(1,5, "p1");
	p2: Point := new Point(2,3,"p2");
	p3: Point := new Point(0,0,"p3");
	
	o : PointColore := new PointColore(50, 100, CouleurFactory.noir() );
	o2: Point;
	
	pn : PointNoir := new PointNoir(+1,-1);
	dp : DefaultPoint := new DefaultPoint();
	
	p2.move( p1.getx(), p1.gety(), true);
	o.setName("origine");
	p2.move(p1.getx() - 2*5-3, p1.gety(), true); 
	o.print(true);
	p2.print(true);
	
	o2 := o.clone();
	o2.print(true);
	
	o2.clone().move(54,36,0).print(true);
	o.allClones();
	
	o2:= p1.clone();
	o2.move(+2,-3,0);
	p1.print(O);
	o2.clone();
	p1.allClones();
	
	"Fin de la seconde liste\n".println();

	"test(Point,PointColore, PointNoir)".println();
	
	Test.test(p1,o,pn);

	"test(PointNoir,PointNoir,PointNoir)".println();
	
	Test.test(pn,pn,pn);
	
	p1 := pn; /* affectation entre pointeur */
	
	Test.test2(o);
	Test.test2(pn);
	
	o := pn;

	"test(PointNoir, PointNoir, PointNoir)".println();
	
	Test.test(p1,o,pn);
	Test.test2(o);
	Test.test2(pn);
	"\nDone".println();
}
